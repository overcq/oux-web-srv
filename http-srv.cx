//-*-C-*-
/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  server
*   ---   web server
*         HTTP server
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2022‒9‒24 P
*******************************************************************************/
struct E_http_srv_Z_accept
{ int poll_fd;
  int listen_sock;
  SSL *ssl;
  struct sockaddr peer_addr;
  int file;
  off_t file_size;
  Pc buf, buf_, buf_2;
  N buf_l;
  Z_clock_time keepalive_tv;
  off_t l, first_l;
  B stream;
  pid_t child;
} *E_http_srv_S_accept;
N E_http_srv_S_accept_n;
//==============================================================================
N
E_http_srv_Q_accept_M( SSL *ssl
, int poll_fd
, int listen_sock
, struct sockaddr *peer_addr
){  if( !E_mem_Q_blk_I_append( &E_http_srv_S_accept, 1 ))
        return ~0;
    E_http_srv_S_accept_n++;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].ssl = ssl;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].poll_fd = poll_fd;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].listen_sock = listen_sock;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].peer_addr = *peer_addr;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].file = -1;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].child = -1;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].buf = M( S_headers_buffer_l );
    if( !E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].buf )
    {   E_reply_I_code( E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].ssl, listen_sock, 500, yes, no );
        E_mem_Q_blk_I_remove( &E_http_srv_S_accept, --E_http_srv_S_accept_n, 1 );
        return ~0;
    }
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].buf_2 = 0;
    E_http_srv_S_accept[ E_http_srv_S_accept_n - 1 ].buf_l = 0;
    return 0;
}
void
E_http_srv_Q_accept_W_1( N i
){  if( E_http_srv_S_accept[i].file != -1 )
    {   V0( close( E_http_srv_S_accept[i].file )){}
    }
    if( E_http_srv_S_accept[i].child != -1 )
    {   V0( kill( E_http_srv_S_accept[i].child, SIGTERM )){}
    }
    if( E_http_srv_S_accept[i].ssl )
    {   SSL_shutdown( E_http_srv_S_accept[i].ssl );
        SSL_free( E_http_srv_S_accept[i].ssl );
    }
    E_http_srv_Q_accept_W_2(i);
}
void
E_http_srv_Q_accept_W_2( N i
){  if( E_http_srv_S_accept[i].buf_2 )
        W( E_http_srv_S_accept[i].buf_2 );
    W( E_http_srv_S_accept[i].buf );
    V0( close( E_http_srv_S_accept[i].listen_sock )){}
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
void
E_http_srv_I_php_cgi_M( B post
, N srv_i
, N accept_i
, struct E_srv_Z_inheaders *inheader
, Pc path
, N path_uri_i
, N path_uri_end_i
, N post_l
, Pc body
){  N environ_n = 27 + ( post ? 2 : 0 );
    N environ_i = 0;
    Mt_( environ, environ_n );
    if( !environ )
    {   G_(); V();
    }
    environ[ environ_i++ ] = "GATEWAY_INTERFACE=CGI/1.1";
    N l_1 = E_text_Z_n_N_s_G( E_conf_S_bind[ E_srv_S_srv[ srv_i ].bind_i ].port, sizeof( E_conf_S_bind[ E_srv_S_srv[ srv_i ].bind_i ].port ), 10 );
    N l = J_s0_R_l( "SERVER_PORT=" ) + l_1 + 1;
    Pc s = M(l);
    if( !s )
    {   G_(); V();
    }
    Pc s_1 = E_text_Z_s_P_copy_s0( s, "SERVER_PORT=" );
    E_text_Z_n_N_s( s_1 + l_1, E_conf_S_bind[ E_srv_S_srv[ srv_i ].bind_i ].port, sizeof( E_conf_S_bind[ E_srv_S_srv[ srv_i ].bind_i ].port ), 10 );
    *( s_1 + l_1 ) = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "SERVER_NAME=" ) + E_text_Z_s0_R_l( E_srv_S_srv[ srv_i ].canonical ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "SERVER_NAME=" ), E_srv_S_srv[ srv_i ].canonical );
    environ[ environ_i++ ] = s;
    environ[ environ_i++ ] = "SERVER_SOFTWARE=" S_server_name;
    environ[ environ_i++ ] = "SERVER_PROTOCOL=HTTP/1.1";
    l = J_s0_R_l( "REQUEST_METHOD=" ) + inheader->request.end - inheader->request.start + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s_0( E_text_Z_s_P_copy_s0( s, "REQUEST_METHOD=" ), inheader->request.start, inheader->request.end );
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "QUERY_STRING=" ) + ( inheader->query.start ? inheader->query.end - inheader->query.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "QUERY_STRING=" );
    if( inheader->query.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->query.start, inheader->query.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_ACCEPT=" ) + ( inheader->accept.start ? inheader->accept.end - inheader->accept.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_ACCEPT=" );
    if( inheader->accept.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->accept.start, inheader->accept.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_ACCEPT_CHARSET=" ) + ( inheader->accept_charset.start ? inheader->accept_charset.end - inheader->accept_charset.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_ACCEPT_CHARSET=" );
    if( inheader->accept_charset.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->accept_charset.start, inheader->accept_charset.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_ACCEPT_ENCODING=" ) + ( inheader->accept_encoding.start ? inheader->accept_encoding.end - inheader->accept_encoding.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_ACCEPT_ENCODING=" );
    if( inheader->accept_encoding.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->accept_encoding.start, inheader->accept_encoding.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_ACCEPT_LANGUAGE=" ) + ( inheader->accept_language.start ? inheader->accept_language.end - inheader->accept_language.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_ACCEPT_LANGUAGE=" );
    if( inheader->accept_language.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->accept_language.start, inheader->accept_language.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_CONNECTION=" ) + ( inheader->connection.start ? inheader->connection.end - inheader->connection.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_CONNECTION=" );
    if( inheader->connection.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->connection.start, inheader->connection.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_COOKIE=" ) + ( inheader->cookie.start ? inheader->cookie.end - inheader->cookie.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_COOKIE=" );
    if( inheader->cookie.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->cookie.start, inheader->cookie.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_HOST=" ) + ( inheader->host.start ? inheader->host.end - inheader->host.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_HOST=" );
    if( inheader->host.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->host.start, inheader->host.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_REFERER=" ) + ( inheader->referrer.start ? inheader->referrer.end - inheader->referrer.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_REFERER=" );
    if( inheader->referrer.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->referrer.start, inheader->referrer.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTP_USER_AGENT=" ) + ( inheader->user_agent.start ? inheader->user_agent.end - inheader->user_agent.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s0( s, "HTTP_USER_AGENT=" );
    if( inheader->user_agent.start )
        E_text_Z_s_P_copy_s_0( s_1, inheader->user_agent.start, inheader->user_agent.end );
    else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "HTTPS=" ) + ( E_http_srv_S_accept[ accept_i ].ssl ? 1 : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "HTTPS=" ),  E_http_srv_S_accept[ accept_i ].ssl ? "1" : "" );
    environ[ environ_i++ ] = s;
    Pc ip;
    N16 port;
    if( E_http_srv_S_accept[ accept_i ].peer_addr.sa_family == AF_INET )
    {   ip = M( INET_ADDRSTRLEN + 1 );
        if( !ip )
        {   G_(); V();
        }
        E_mem_Q_blk_P_fill_c( ip, INET_ADDRSTRLEN + 1, 0 );
        struct sockaddr_in *sa = (P)&E_http_srv_S_accept[ accept_i ].peer_addr;
        Vp_( inet_ntop( E_http_srv_S_accept[ accept_i ].peer_addr.sa_family, &sa->sin_addr, ip, INET_ADDRSTRLEN ));
        port = ntohs( sa->sin_port );
    }else
    {   ip = M( INET6_ADDRSTRLEN + 1 );
        if( !ip )
        {   G_(); V();
        }
        E_mem_Q_blk_P_fill_c( ip, INET6_ADDRSTRLEN + 1, 0 );
        struct sockaddr_in6 *sa = (P)&E_http_srv_S_accept[ accept_i ].peer_addr;
        Vp_( inet_ntop( E_http_srv_S_accept[ accept_i ].peer_addr.sa_family, &sa->sin6_addr, ip, INET6_ADDRSTRLEN ));
        port = ntohs( sa->sin6_port );
    }
    G_(); Gd( accept_i ); Gs0(ip);
    l = J_s0_R_l( "REMOTE_ADDR=" ) + E_text_Z_s0_R_l(ip) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "REMOTE_ADDR=" ), ip );
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "REMOTE_HOST=" ) + E_text_Z_s0_R_l(ip) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "REMOTE_HOST=" ), ip );
    environ[ environ_i++ ] = s;
    environ[ environ_i++ ] = "AUTH_TYPE=";
    environ[ environ_i++ ] = "PATH_INFO=";
    N port_l = E_text_Z_n_N_s_G( port, sizeof(port), 10 );
    l = J_s0_R_l( "REMOTE_PORT=" ) + port_l + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0( s, "REMOTE_PORT=" );
    E_text_Z_n_N_s( s + E_text_Z_s0_R_l( "REMOTE_PORT=" ) + port_l, port, sizeof(port), 10 );
    *( s + E_text_Z_s0_R_l( "REMOTE_PORT=" ) + port_l ) = '\0';
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "REQUEST_URI=" ) + E_text_Z_s0_R_l( path + path_uri_i ) - E_text_Z_s0_R_l( path + path_uri_end_i ) + 1 + ( inheader->query.start ? inheader->query.end - inheader->query.start : 0 ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    s_1 = E_text_Z_s_P_copy_s( E_text_Z_s_P_copy_s0( s, "REQUEST_URI=" ), path + path_uri_i, path + path_uri_end_i );
    if( inheader->query.start )
    {   *s_1++ = '?';
        E_text_Z_s_P_copy_s_0( s_1, inheader->query.start, inheader->query.end );
    }else
        *s_1 = '\0';
    environ[ environ_i++ ] = s;
    environ[ environ_i++ ] = "REDIRECT_STATUS=200";
    l = J_s0_R_l( "SCRIPT_FILENAME=" ) + E_text_Z_s0_R_l(path) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "SCRIPT_FILENAME=" ), path );
    environ[ environ_i++ ] = s;
    l = J_s0_R_l( "SCRIPT_NAME=" ) + E_text_Z_s0_R_l( path + path_uri_i ) + 1;
    s = M(l);
    if( !s )
    {   G_(); V();
    }
    E_text_Z_s_P_copy_s0_0( E_text_Z_s_P_copy_s0( s, "SCRIPT_NAME=" ), path + path_uri_i );
    environ[ environ_i++ ] = s;
    if(post)
    {   l = J_s0_R_l( "CONTENT_TYPE=" ) + inheader->content_type.end - inheader->content_type.start + 1;
        s = M(l);
        if( !s )
        {   G_(); V();
        }
        E_text_Z_s_P_copy_s_0( E_text_Z_s_P_copy_s0( s, "CONTENT_TYPE=" ), inheader->content_type.start, inheader->content_type.end );
        environ[ environ_i++ ] = s;
        N l_1 = E_text_Z_n_N_s_G( post_l, sizeof( post_l ), 10 );
        l = J_s0_R_l( "CONTENT_LENGTH=" ) + l_1 + 1;
        s = M(l);
        if( !s )
        {   G_(); V();
        }
        E_text_Z_s_P_copy_s0( s, "CONTENT_LENGTH=" );
        E_text_Z_n_N_s( s + E_text_Z_s0_R_l( "CONTENT_LENGTH=" ) + l_1, post_l, sizeof( post_l ), 10 );
        *( s + E_text_Z_s0_R_l( "CONTENT_LENGTH=" ) + l_1 ) = '\0';
        environ[ environ_i++ ] = s;
        int tmp_pipe[2];
        V0_( pipe( &tmp_pipe[0] ));
        VO1_( dup2( tmp_pipe[0], STDIN_FILENO ));
        V0_( close( tmp_pipe[0] ));
        E_net_cli_I_write_data( 0, tmp_pipe[1], body, post_l );
        V0_( close( tmp_pipe[1] ));
    }else
    {   V0_( close( STDIN_FILENO ));
    }
    environ[ environ_i ] = 0;
    J_assert( environ_i + 1 == environ_n );
}
/******************************************************************************/
