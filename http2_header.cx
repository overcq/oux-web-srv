/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  server
*   ---   web server
*         HTTP/2 header
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2020‒6‒20 U
*******************************************************************************/
N E_http2_header_S_static_table_first_index = 15;
Pc
E_http2_header_S_static_table[] =
{ "Accept-Charset"
, "Accept-Encoding"
, "Accept-Language"
, "Accept-Ranges"
, "Accept"
, "Access-Control-Allow-Origin"
, "Age"
, "Allow"
, "Authorizatin"
, "Cache-Control"
, "Content-Disposition"
, "Content-Encoding"
, "Content-Language"
, "Content-Length"
, "Content-Location"
, "Content-Range"
, "Content-Type"
, "Cookie"
, "Date"
, "Etag"
, "Expect"
, "Expires"
, "From"
, "Host"
, "If-Match"
, "If-Modified-Since"
, "If-None-Match"
, "If-Range"
, "If-Unmodified-Since"
, "Last-Modified"
, "Link"
, "Location"
, "Max-Forwards"
, "Proxy-Authenticate"
, "Proxy-Authorization"
, "Range"
, "Referer"
, "Refresh"
, "Retry-After"
, "Server"
, "Set-Cookie"
, "Strict-Transport-Security"
, "Transfer-Encoding"
, "User-Agent"
, "Vary"
, "Via"
, "Www-Authenticate"
};
struct E_http2_header_Z_huffman_code
{ N32 code;
  N8 length;
};
struct E_http2_header_Z_huffman_code
E_http2_header_S_huffman_table[] =
{ { 0x1ff8, 13 }
, { 0x7fffd8, 23 }
, { 0xfffffe2, 28 }
, { 0xfffffe3, 28 }
, { 0xfffffe4, 28 }
, { 0xfffffe5, 28 }
, { 0xfffffe6, 28 }
, { 0xfffffe7, 28 }
, { 0xfffffe8, 28 }
, { 0xffffea, 24 }
, { 0x3ffffffc, 30 }
, { 0xfffffe9, 28 }
, { 0xfffffea, 28 }
, { 0x3ffffffd, 30 }
, { 0xfffffeb, 28 }
, { 0xfffffec, 28 }
, { 0xfffffed, 28 }
, { 0xfffffee, 28 }
, { 0xfffffef, 28 }
, { 0xffffff0, 28 }
, { 0xffffff1, 28 }
, { 0xffffff2, 28 }
, { 0x3ffffffe, 30 }
, { 0xffffff3, 28 }
, { 0xffffff4, 28 }
, { 0xffffff5, 28 }
, { 0xffffff6, 28 }
, { 0xffffff7, 28 }
, { 0xffffff8, 28 }
, { 0xffffff9, 28 }
, { 0xffffffa, 28 }
, { 0xffffffb, 28 }
, { 0x14, 6 }
, { 0x3f8, 10 }
, { 0x3f9, 10 }
, { 0xffa, 12 }
, { 0x1ff9, 13 }
, { 0x15, 6 }
, { 0xf8, 8 }
, { 0x7fa, 11 }
, { 0x3fa, 10 }
, { 0x3fb, 10 }
, { 0xf9, 8 }
, { 0x7fb, 11 }
, { 0xfa, 8 }
, { 0x16, 6 }
, { 0x17, 6 }
, { 0x18, 6 }
, { 0x0, 5 }
, { 0x1, 5 }
, { 0x2, 5 }
, { 0x19, 6 }
, { 0x1a, 6 }
, { 0x1b, 6 }
, { 0x1c, 6 }
, { 0x1d, 6 }
, { 0x1e, 6 }
, { 0x1f, 6 }
, { 0x5c, 7 }
, { 0xfb, 8 }
, { 0x7ffc, 15 }
, { 0x20, 6 }
, { 0xffb, 12 }
, { 0x3fc, 10 }
, { 0x1ffa, 13 }
, { 0x21, 6 }
, { 0x5d, 7 }
, { 0x5e, 7 }
, { 0x5f, 7 }
, { 0x60, 7 }
, { 0x61, 7 }
, { 0x62, 7 }
, { 0x63, 7 }
, { 0x64, 7 }
, { 0x65, 7 }
, { 0x66, 7 }
, { 0x67, 7 }
, { 0x68, 7 }
, { 0x69, 7 }
, { 0x6a, 7 }
, { 0x6b, 7 }
, { 0x6c, 7 }
, { 0x6d, 7 }
, { 0x6e, 7 }
, { 0x6f, 7 }
, { 0x70, 7 }
, { 0x71, 7 }
, { 0x72, 7 }
, { 0xfc, 8 }
, { 0x73, 7 }
, { 0xfd, 8 }
, { 0x1ffb, 13 }
, { 0x7fff0, 19 }
, { 0x1ffc, 13 }
, { 0x3ffc, 14 }
, { 0x22, 6 }
, { 0x7ffd, 15 }
, { 0x3, 5 }
, { 0x23, 6 }
, { 0x4, 5 }
, { 0x24, 6 }
, { 0x5, 5 }
, { 0x25, 6 }
, { 0x26, 6 }
, { 0x27, 6 }
, { 0x6, 5 }
, { 0x74, 7 }
, { 0x75, 7 }
, { 0x28, 6 }
, { 0x29, 6 }
, { 0x2a, 6 }
, { 0x7, 5 }
, { 0x2b, 6 }
, { 0x76, 7 }
, { 0x2c, 6 }
, { 0x8, 5 }
, { 0x9, 5 }
, { 0x2d, 6 }
, { 0x77, 7 }
, { 0x78, 7 }
, { 0x79, 7 }
, { 0x7a, 7 }
, { 0x7b, 7 }
, { 0x7ffe, 15 }
, { 0x7fc, 11 }
, { 0x3ffd, 14 }
, { 0x1ffd, 13 }
, { 0xffffffc, 28 }
, { 0xfffe6, 20 }
, { 0x3fffd2, 22 }
, { 0xfffe7, 20 }
, { 0xfffe8, 20 }
, { 0x3fffd3, 22 }
, { 0x3fffd4, 22 }
, { 0x3fffd5, 22 }
, { 0x7fffd9, 23 }
, { 0x3fffd6, 22 }
, { 0x7fffda, 23 }
, { 0x7fffdb, 23 }
, { 0x7fffdc, 23 }
, { 0x7fffdd, 23 }
, { 0x7fffde, 23 }
, { 0xffffeb, 24 }
, { 0x7fffdf, 23 }
, { 0xffffec, 24 }
, { 0xffffed, 24 }
, { 0x3fffd7, 22 }
, { 0x7fffe0, 23 }
, { 0xffffee, 24 }
, { 0x7fffe1, 23 }
, { 0x7fffe2, 23 }
, { 0x7fffe3, 23 }
, { 0x7fffe4, 23 }
, { 0x1fffdc, 21 }
, { 0x3fffd8, 22 }
, { 0x7fffe5, 23 }
, { 0x3fffd9, 22 }
, { 0x7fffe6, 23 }
, { 0x7fffe7, 23 }
, { 0xffffef, 24 }
, { 0x3fffda, 22 }
, { 0x1fffdd, 21 }
, { 0xfffe9, 20 }
, { 0x3fffdb, 22 }
, { 0x3fffdc, 22 }
, { 0x7fffe8, 23 }
, { 0x7fffe9, 23 }
, { 0x1fffde, 21 }
, { 0x7fffea, 23 }
, { 0x3fffdd, 22 }
, { 0x3fffde, 22 }
, { 0xfffff0, 24 }
, { 0x1fffdf, 21 }
, { 0x3fffdf, 22 }
, { 0x7fffeb, 23 }
, { 0x7fffec, 23 }
, { 0x1fffe0, 21 }
, { 0x1fffe1, 21 }
, { 0x3fffe0, 22 }
, { 0x1fffe2, 21 }
, { 0x7fffed, 23 }
, { 0x3fffe1, 22 }
, { 0x7fffee, 23 }
, { 0x7fffef, 23 }
, { 0xfffea, 20 }
, { 0x3fffe2, 22 }
, { 0x3fffe3, 22 }
, { 0x3fffe4, 22 }
, { 0x7ffff0, 23 }
, { 0x3fffe5, 22 }
, { 0x3fffe6, 22 }
, { 0x7ffff1, 23 }
, { 0x3ffffe0, 26 }
, { 0x3ffffe1, 26 }
, { 0xfffeb, 20 }
, { 0x7fff1, 19 }
, { 0x3fffe7, 22 }
, { 0x7ffff2, 23 }
, { 0x3fffe8, 22 }
, { 0x1ffffec, 25 }
, { 0x3ffffe2, 26 }
, { 0x3ffffe3, 26 }
, { 0x3ffffe4, 26 }
, { 0x7ffffde, 27 }
, { 0x7ffffdf, 27 }
, { 0x3ffffe5, 26 }
, { 0xfffff1, 24 }
, { 0x1ffffed, 25 }
, { 0x7fff2, 19 }
, { 0x1fffe3, 21 }
, { 0x3ffffe6, 26 }
, { 0x7ffffe0, 27 }
, { 0x7ffffe1, 27 }
, { 0x3ffffe7, 26 }
, { 0x7ffffe2, 27 }
, { 0xfffff2, 24 }
, { 0x1fffe4, 21 }
, { 0x1fffe5, 21 }
, { 0x3ffffe8, 26 }
, { 0x3ffffe9, 26 }
, { 0xffffffd, 28 }
, { 0x7ffffe3, 27 }
, { 0x7ffffe4, 27 }
, { 0x7ffffe5, 27 }
, { 0xfffec, 20 }
, { 0xfffff3, 24 }
, { 0xfffed, 20 }
, { 0x1fffe6, 21 }
, { 0x3fffe9, 22 }
, { 0x1fffe7, 21 }
, { 0x1fffe8, 21 }
, { 0x7ffff3, 23 }
, { 0x3fffea, 22 }
, { 0x3fffeb, 22 }
, { 0x1ffffee, 25 }
, { 0x1ffffef, 25 }
, { 0xfffff4, 24 }
, { 0xfffff5, 24 }
, { 0x3ffffea, 26 }
, { 0x7ffff4, 23 }
, { 0x3ffffeb, 26 }
, { 0x7ffffe6, 27 }
, { 0x3ffffec, 26 }
, { 0x3ffffed, 26 }
, { 0x7ffffe7, 27 }
, { 0x7ffffe8, 27 }
, { 0x7ffffe9, 27 }
, { 0x7ffffea, 27 }
, { 0x7ffffeb, 27 }
, { 0xffffffe, 28 }
, { 0x7ffffec, 27 }
, { 0x7ffffed, 27 }
, { 0x7ffffee, 27 }
, { 0x7ffffef, 27 }
, { 0x7fffff0, 27 }
, { 0x3ffffee, 26 }
, { 0x3fffffff, 30 }
};
//==============================================================================
Pc
E_http2_header_I_decode( Pc *buffer
, N length
){  Pc s = M(1);
    if( !s )
        return 0;
    s[0] = '\0';
    N64 v = 0;
    N v_l = 0;
    O{  if( v_l < 30
        && length
        )
        {   v <<= 8;
            v |= E_http2_srv_I_read_n( buffer, 1 );
            v_l += 8;
            length--;
        }
        for_n( i, sizeof( E_http2_header_S_huffman_table ) / sizeof( E_http2_header_S_huffman_table[0] ))
        {   if( v_l < E_http2_header_S_huffman_table[i].length )
                continue;
            if(( v >> ( v_l - E_http2_header_S_huffman_table[i].length )) == E_http2_header_S_huffman_table[i].code )
            {   if( !E_text_Z_s0_I_c_append( &s, i ))
                {   W(s);
                    return 0;
                }
                v_l -= E_http2_header_S_huffman_table[i].length;
                if( v_l )
                    v &= (N64)~0 >> ( sizeof(N64) * 8 - v_l );
                else
                    v = 0;
                goto For_end;
            }
        }
        if( v_l < 30
        && length
        )
            continue;
        if( !length
        && v_l < 8
        )
            return s;
        W(s);
        return 0;
For_end:;
    }
}
N
E_http2_header_I_read( Pc *buffer
, N length
, Pc **headers
, N *headers_n
, Pc **dynamic_table
, N *dynamic_table_n
){  while(length)
    {   N8 b = E_http2_srv_I_read_n( buffer, 1 );
        length--;
        if( b & 0x80 )
        {   b &= 0x7f;
            if( b < E_http2_header_S_static_table_first_index )
            {   Pc name;
                switch(b)
                { default:
                        return ~0;
                  case 2:
                        name = ":method: GET";
                        break;
                  case 3:
                        name = ":method: POST";
                        break;
                  case 4:
                        name = ":path: /";
                        break;
                  case 5:
                        name = ":path: /index.html";
                        break;
                  case 6:
                        name = ":scheme: http";
                        break;
                  case 7:
                        name = ":scheme: https";
                        break;
                  case 8:
                        name = ":status: 200";
                        break;
                  case 9:
                        name = ":status: 204";
                        break;
                  case 10:
                        name = ":status: 206";
                        break;
                  case 11:
                        name = ":status: 304";
                        break;
                  case 12:
                        name = ":status: 400";
                        break;
                  case 13:
                        name = ":status: 404";
                        break;
                  case 14:
                        name = ":status: 500";
                        break;
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                    return ~0;
                (*headers_n)++;
                N l = E_text_Z_s0_R_0_l(name);
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], name );
            }else if( b == 16 )
            {   if( !E_mem_Q_blk_I_append( headers, 1 ))
                    return ~0;
                (*headers_n)++;
                (*headers)[ *headers_n - 1 ] = M(31);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], "Accept-Encoding: gzip, deflate" );
            }else
            {   b -= E_http2_header_S_static_table_first_index;
                if( b < sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] ))
                {   if( !E_mem_Q_blk_I_append( headers, 1 ))
                        return ~0;
                    (*headers_n)++;
                    N l = E_text_Z_s0_R_0_l( E_http2_header_S_static_table[b] ) + 1;
                    (*headers)[ *headers_n - 1 ] = M(l);
                    if( !(*headers)[ *headers_n - 1 ] )
                    {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                        return ~0;
                    }
                    E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], E_http2_header_S_static_table[b] ), ":" );
                }else
                {   b -= sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] );
                    if( b >= *dynamic_table_n )
                        return ~0;
                    if( !E_mem_Q_blk_I_append( headers, 1 ))
                        return ~0;
                    (*headers_n)++;
                    N l = E_text_Z_s0_R_0_l( (*dynamic_table)[b] );
                    (*headers)[ *headers_n - 1 ] = M(l);
                    if( !(*headers)[ *headers_n - 1 ] )
                    {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                        return ~0;
                    }
                    E_text_Z_s_P_s0_copy_0( (*headers)[ *headers_n - 1 ], (*dynamic_table)[b] );
                }
            }
        }else if(( b & 0xc0 ) == 0x40 )
        {   b &= 0x3f;
            Pc name;
            if( !b )
            {   if( !length )
                    return ~0;
                length--;
                N8 name_length = E_http2_srv_I_read_n( buffer, 1 );
                N l = name_length & 0x7f;
                if( length < l )
                    return ~0;
                length -= l;
                if( name_length & 0x80 )
                {   name = E_http2_header_I_decode( buffer, l );
                    if( !name )
                        return ~0;
                }else
                {   name = M( l + 1 );
                    if( !name )
                        return ~0;
                    E_http2_srv_I_read_s_l( buffer, name, l );
                    name[l] = '\0';
                }
            }else
            {   if( b < E_http2_header_S_static_table_first_index )
                {   switch(b)
                    { case 1:
                            name = M(11);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":authority" );
                            break;
                      case 2:
                      case 3:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":method" );
                            break;
                      case 4:
                      case 5:
                            name = M(6);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":path" );
                            break;
                      case 6:
                      case 7:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":scheme" );
                            break;
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":status" );
                            break;
                    }
                }else
                {   b -= E_http2_header_S_static_table_first_index;
                    if( b < sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] ))
                    {   N l = E_text_Z_s0_R_0_l( E_http2_header_S_static_table[b] );
                        name = M(l);
                        if( !name )
                            return ~0;
                        E_text_Z_s_P_s0_copy_0( name, E_http2_header_S_static_table[b] );
                    }else
                    {   b -= sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] );
                        if( b >= *dynamic_table_n )
                            return ~0;
                        Pc s = E_text_Z_s0_R_c_search( (*dynamic_table)[b] + 1, ':' );
                        if( !*s )
                            return ~0;
                        N l = s - (*dynamic_table)[b] + 1;
                        name = M(l);
                        if( !name )
                            return ~0;
                        E_text_Z_s_P_s_copy_0( name, (*dynamic_table)[b], s );
                    }
                }
            }
            if( !length )
            {   W(name);
                return ~0;
            }
            length--;
            N8 value_length = E_http2_srv_I_read_n( buffer, 1 );
            Pc value;
            N l = value_length & 0x7f;
            if( length < l )
            {   W(name);
                return ~0;
            }
            length -= l;
            if( value_length & 0x80 )
            {   value = E_http2_header_I_decode( buffer, l );
                if( !value )
                {   W(name);
                    return ~0;
                }
            }else
            {   value = M( l + 1 );
                if( !value )
                {   W(name);
                    return ~0;
                }
                E_http2_srv_I_read_s_l( buffer, value, l );
                value[l] = '\0';
            }
            if( !E_mem_Q_blk_I_append( headers, 1 ))
            {   W(value);
                W(name);
                return ~0;
            }
            (*headers_n)++;
            l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
            (*headers)[ *headers_n - 1 ] = M(l);
            if( !(*headers)[ *headers_n - 1 ] )
            {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                W(value);
                W(name);
                return ~0;
            }
            E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
            if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
            {   W(value);
                W(name);
                return ~0;
            }
            (*dynamic_table_n)++;
            (*dynamic_table)[ *dynamic_table_n - 1 ] = M(l);
            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
            {   E_mem_Q_blk_I_remove( dynamic_table, --*dynamic_table_n, 1 );
                W(value);
                W(name);
                return ~0;
            }
            E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*dynamic_table)[ *dynamic_table_n - 1 ], name ), ": " ), value );
            W(value);
            W(name);
        }else if(( b & 0xf0 ) == 0
        || ( b & 0xf0 ) == 0x10
        )
        {   b &= 0xf;
            Pc name;
            if( !b )
            {   if( !length )
                    return ~0;
                length--;
                N8 name_length = E_http2_srv_I_read_n( buffer, 1 );
                N l = name_length & 0x7f;
                if( length < l )
                    return ~0;
                length -= l;
                if( name_length & 0x80 )
                {   name = E_http2_header_I_decode( buffer, l );
                    if( !name )
                        return ~0;
                }else
                {   name = M( l + 1 );
                    if( !name )
                        return ~0;
                    E_http2_srv_I_read_s_l( buffer, name, l );
                    name[l] = '\0';
                }
                if( !length )
                {   W(name);
                    return ~0;
                }
                length--;
                N8 value_length = E_http2_srv_I_read_n( buffer, 1 );
                Pc value;
                l = value_length & 0x7f;
                if( length < l )
                {   W(name);
                    return ~0;
                }
                length -= l;
                if( value_length & 0x80 )
                {   value = E_http2_header_I_decode( buffer, l );
                    if( !value )
                    {   W(name);
                        return ~0;
                    }
                }else
                {   value = M( l + 1 );
                    if( !value )
                    {   W(name);
                        return ~0;
                    }
                    E_http2_srv_I_read_s_l( buffer, value, l );
                    value[l] = '\0';
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                {   W(value);
                    W(name);
                    return ~0;
                }
                (*headers_n)++;
                l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    W(value);
                    W(name);
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
                W(value);
                W(name);
            }else
            {   if( !length )
                    return ~0;
                length--;
                N8 value_length = E_http2_srv_I_read_n( buffer, 1 );
                Pc value;
                N l = value_length & 0x7f;
                if( length < l )
                    return ~0;
                length -= l;
                if( value_length & 0x80 )
                {   value = E_http2_header_I_decode( buffer, l );
                    if( !value )
                        return ~0;
                }else
                {   value = M( l + 1 );
                    if( !value )
                        return ~0;
                    E_http2_srv_I_read_s_l( buffer, value, l );
                    value[l] = '\0';
                }
                if( b < E_http2_header_S_static_table_first_index )
                    switch(b)
                    { case 1:
                            name = M(11);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":authority" );
                            break;
                      case 2:
                      case 3:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":method" );
                            break;
                      case 4:
                      case 5:
                            name = M(6);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":path" );
                            break;
                      case 6:
                      case 7:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":scheme" );
                            break;
                      case 8:
                      case 9:
                      case 10:
                      case 11:
                      case 12:
                      case 13:
                      case 14:
                            name = M(8);
                            if( !name )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( name, ":status" );
                            break;
                    }
                else
                {   b -= E_http2_header_S_static_table_first_index;
                    N l = E_text_Z_s0_R_0_l( E_http2_header_S_static_table[b] );
                    name = M(l);
                    if( !name )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( name, E_http2_header_S_static_table[b] );
                }
                if( !E_mem_Q_blk_I_append( headers, 1 ))
                {   W(value);
                    W(name);
                    return ~0;
                }
                (*headers_n)++;
                l = E_text_Z_s0_R_l(name) + 2 + E_text_Z_s0_R_l(value) + 1;
                (*headers)[ *headers_n - 1 ] = M(l);
                if( !(*headers)[ *headers_n - 1 ] )
                {   E_mem_Q_blk_I_remove( headers, --*headers_n, 1 );
                    W(value);
                    W(name);
                    return ~0;
                }
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( E_text_Z_s_P_s0_copy( (*headers)[ *headers_n - 1 ], name ), ": " ), value );
                W(value);
                W(name);
            }
        }else if(( b & 0xe0 ) == 0x20 )
        {   b &= 0x1f;
            if( b < *dynamic_table_n )
            {   for_n( i, *dynamic_table_n - b )
                    W( (*dynamic_table)[ b + i ] );
                E_mem_Q_blk_I_remove( dynamic_table, b, *dynamic_table_n - b );
                *dynamic_table_n = b;
            }
        }
    }
    return 0;
}
N
E_http2_header_I_encode( Pc s
, Pc *buffer
, N *length
){  *buffer = M(0);
    if( !*buffer )
        return ~0;
    *length = 0;
    N64 v = 0;
    N v_l = 0;
    while( *s )
    {   v <<= E_http2_header_S_huffman_table[ (int)*s ].length;
        v |= E_http2_header_S_huffman_table[ (int)*s ].code;
        v_l += E_http2_header_S_huffman_table[ (int)*s ].length;
        while( v_l >= 8 )
        {   Pc p = E_mem_Q_blk_I_append( buffer, 1 );
            if( !p )
            {   W( *buffer );
                return ~0;
            }
            v_l -= 8;
            *p = v >> v_l;
            v &= ( 1 << v_l ) - 1;
            (*length)++;
        }
        s++;
    }
    if( v_l )
    {   Pc p = E_mem_Q_blk_I_append( buffer, 1 );
        if( !p )
        {   W( *buffer );
            return ~0;
        }
        *p = ( v << ( 8 - v_l )) | ( (N8)~0 >> v_l );
        (*length)++;
    }
    return 0;
}
N
E_http2_header_I_encode_or_plain( Pc *buffer
, Pc s
){  Pc buffer_;
    N length;
    if( !~E_http2_header_I_encode( s, &buffer_, &length ))
        return ~0;
    N l = E_text_Z_s0_R_l(s);
    if( l > length )
    {   E_http2_srv_I_write_n( buffer, 0x80 | length, 1 );
        for_n( i, length )
            E_http2_srv_I_write_n( buffer, buffer_[i], 1 );
    }else
    {   E_http2_srv_I_write_n( buffer, l, 1 );
        while( *s )
        {   E_http2_srv_I_write_n( buffer, *s, 1 );
            s++;
        }
    }
    return 0;
}
N
E_http2_header_I_write( Pc *buffer
, Pc *headers
, N headers_n
, Pc **dynamic_table
, N *dynamic_table_n
){  for_n( headers_i, headers_n )
    {   N index;
        if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":authority: " ))
        {   index = 1;
            if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                return ~0;
            (*dynamic_table_n)++;
            (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                return ~0;
            E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
            E_http2_srv_I_write_n( buffer, 0x40 | index, 1 );
            if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + 12 ))
                return ~0;
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":method: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "GET" ))
            {   index = 2;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "POST" ))
            {   index = 3;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else
            {   index = 2;
                if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                    return ~0;
                (*dynamic_table_n)++;
                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                E_http2_srv_I_write_n( buffer, 0x40 | index, 1 );
                if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":path: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 7, "/" ))
            {   index = 4;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 7, "/index.html" ))
            {   index = 5;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else
            {   index = 4;
                if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                    return ~0;
                (*dynamic_table_n)++;
                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                E_http2_srv_I_write_n( buffer, 0x40 | index, 1 );
                if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + 7 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":scheme: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "http" ))
            {   index = 6;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "https" ))
            {   index = 7;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else
            {   index = 6;
                if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                    return ~0;
                (*dynamic_table_n)++;
                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                E_http2_srv_I_write_n( buffer, 0x40 | index, 1 );
                if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], ":status: " ))
        {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "200" ))
            {   index = 8;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "204" ))
            {   index = 9;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "206" ))
            {   index = 10;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "304" ))
            {   index = 11;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "400" ))
            {   index = 12;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "404" ))
            {   index = 13;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + 9, "500" ))
            {   index = 14;
                E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
            }else
            {   index = 8;
                if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                    return ~0;
                (*dynamic_table_n)++;
                (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                E_http2_srv_I_write_n( buffer, 0x40 | index, 1 );
                if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + 9 ))
                    return ~0;
            }
        }else
        {   for_n( i, sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] ))
            {   N l = E_text_Z_s0_R_l( E_http2_header_S_static_table[i] ) + 2;
                Pc s = M( l + 1 );
                if( !s )
                    return ~0;
                E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, E_http2_header_S_static_table[i] ), ": " );
                if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], s ))
                {   W(s);
                    index = E_http2_header_S_static_table_first_index + i;
                    if( index == 16 )
                    {   if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + l, "gzip, deflate" ))
                            E_http2_srv_I_write_n( buffer, 0x80 | index, 1 );
                        else
                        {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                return ~0;
                            (*dynamic_table_n)++;
                            (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                            E_http2_srv_I_write_n( buffer,  0x40 | index, 1 );
                            if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                                return ~0;
                        }
                    }else
                    {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                            return ~0;
                        (*dynamic_table_n)++;
                        (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                        if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                            return ~0;
                        E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                        E_http2_srv_I_write_n( buffer,  0x40 | index, 1 );
                        if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                            return ~0;
                    }
                    break;
                }
                W(s);
            }
            if( i == sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] ))
            {   for_n( i, *dynamic_table_n )
                {   N l = E_text_Z_s0_R_l( (*dynamic_table)[i] ) + 2;
                    Pc s = M( l + 1 );
                    if( !s )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, (*dynamic_table)[i] ), ": " );
                    if( E_text_Z_s0_T_s0_starts_case( headers[ headers_i ], s ))
                    {   W(s);
                        if( E_text_Z_s0_T_s0_eq( headers[ headers_i ] + l, (*dynamic_table)[i] + l ))
                            E_http2_srv_I_write_n( buffer,  0x80 | index, 1 );
                        else
                        {   if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                                return ~0;
                            (*dynamic_table_n)++;
                            (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_0_l( headers[ headers_i ] ));
                            if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                                return ~0;
                            E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                            index = E_http2_header_S_static_table_first_index + sizeof( E_http2_header_S_static_table ) / sizeof( E_http2_header_S_static_table[0] ) + i;
                            E_http2_srv_I_write_n( buffer,  0x40 | index, 1 );
                            if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] + l ))
                            {   W(s);
                                return ~0;
                            }
                        }
                    }else
                        W(s);
                }
                if( i == *dynamic_table_n )
                {   E_http2_srv_I_write_n( buffer,  0x40, 1 );
                    Pc s = E_text_Z_s0_R_c_search( headers[ headers_i ], ':' );
                    *s = '\0';
                    if( !~E_http2_header_I_encode_or_plain( buffer, headers[ headers_i ] ))
                    {   *s = ':';
                        return ~0;
                    }
                    *s = ':';
                    if( !E_mem_Q_blk_I_append( dynamic_table, 1 ))
                        return ~0;
                    (*dynamic_table_n)++;
                    (*dynamic_table)[ *dynamic_table_n - 1 ] = M( E_text_Z_s0_R_l( headers[ headers_i ] ) + 1 );
                    if( !(*dynamic_table)[ *dynamic_table_n - 1 ] )
                        return ~0;
                    E_text_Z_s_P_s0_copy_0( (*dynamic_table)[ *dynamic_table_n - 1 ], headers[ headers_i ] );
                    if( !~E_http2_header_I_encode_or_plain( buffer, s + 2 ))
                        return ~0;
                }
            }
        }
    }
    return 0;
}
Pc
E_http2_header_R_header( Pc *headers
, N headers_n
, Pc header
){  N l = E_text_Z_s0_R_l(header) + 2;
    Pc s = M( l + 1 );
    if( !s )
        return 0;
    E_text_Z_s_P_s0_copy_0( E_text_Z_s_P_s0_copy( s, header ), ": " );
    for_n( i, headers_n )
        if( E_text_Z_s0_T_s0_starts_case( headers[i], s ))
        {   W(s);
            return headers[i] + l;
        }
    W(s);
    return 0;
}
/******************************************************************************/
