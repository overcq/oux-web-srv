//-*-C-*-
/*******************************************************************************
*   ___   workplace
*  ¦OUX¦  C+
*  ¦/C+¦  server
*   ---   web server
*         config file
* ©overcq                on ‟Gentoo Linux 17.1” “x86_64”             2020‒4‒10 S
*******************************************************************************/
#define E_conf_S_newline            "\n"
#define E_conf_S_space              " \t" E_conf_S_newline
#define E_conf_Z_file_S_virtualhost "virtualhost"
#define E_conf_Z_file_S_root_path   "root_path"
#define E_conf_Z_file_S_ip          "ip"
#define E_conf_Z_file_S_port        "port"
#define E_conf_Z_file_S_ssl         "ssl"
#define E_conf_Z_file_S_certificate "certificate_path"
#define E_conf_Z_file_S_private_key "private_key_path"
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
struct E_conf_Z_virtualhost
{ Pc root_path;
  N root_path_n;
  Pc host;
};
struct E_conf_Z_bind
{ Pc ip;
  N16 port;
  B ssl;
  Pc certificate_path;
  Pc private_key_path;
  struct E_conf_Z_virtualhost *virtualhost;
  N virtualhost_n;
} *E_conf_S_bind;
N E_conf_S_bind_n = 0;
//==============================================================================
N
E_conf_I_read_I_b( Pc s
){  if( E_text_Z_s0_T_s0_eq( s, "1" )
    || E_text_Z_s0_T_s0_eq_case( s, "on" )
    || E_text_Z_s0_T_s0_eq_case( s, "yes" )
    )
        return yes;
    if( E_text_Z_s0_T_s0_eq( s, "0" )
    || E_text_Z_s0_T_s0_eq_case( s, "off" )
    || E_text_Z_s0_T_s0_eq_case( s, "no" )
    )
        return no;
    return ~0;
}
N
E_conf_Z_s0_Z_path_P_normalize( Pc *s
){  Pc s_1 = *s, s_2;
    O{  s_2 = E_text_Z_s0_R_c_search( s_1, E_mem_Q_file_S_filename_separator );
        if( !*s_2 )
            break;
        if( s_2 == s_1 + 1 )
        {   if( !E_mem_Q_blk_I_remove( s, s_2 - *s, 1 ))
                return ~0;
            continue;
        }
        s_1 = s_2 + 1;;
    }
    if( *( s_2 - 1 ) == E_mem_Q_file_S_filename_separator )
        if( s_2 - *s == 1
        || !E_mem_Q_blk_I_remove( s, s_2 - 1 - *s, 1 )
        )
            return ~0;
    return 0;
}
//------------------------------------------------------------------------------
N entities_bind, entities_ip, entities_port, entities_ssl, entities_ssl_value, entities_certificate, entities_private_key, entities_virtualhost, entities_root_path, entities_host;
N
entities_func( struct E_text_syntax_Z_body *syntax
, struct E_text_syntax_Z_state *state
, N state_n
){  if( state[ state_n - 1 ].entities_i == entities_bind )
    {   if( !E_mem_Q_blk_I_append( &E_conf_S_bind, 1 ))
            return ~0;
        _0_( &E_conf_S_bind[ E_conf_S_bind_n ] );
        E_conf_S_bind_n++;
        Mt_( E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost, 0 );
        if( !E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost )
            return ~0;
    }else if( state[ state_n - 1 ].entities_i == entities_virtualhost )
    {   if( !E_mem_Q_blk_I_append( &E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost, 1 ))
            return ~0;
        _0_( &E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n ] );
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n++;
    }else if( state[ state_n - 1 ].entities_i == entities_root_path )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n - 1 ].root_path )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc s = M(l);
        if( !s )
            return ~0;
        E_text_Z_s_P_s0_copy_0( s, state[ state_n - 1 ].s );
        if( E_conf_Z_s0_Z_path_P_normalize( &s ))
            return ~0;
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n - 1 ].root_path = s;
        N path_n = 1;
        while( *( s = E_text_Z_s0_R_c_search( s + 1, '/' )))
            path_n++;
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n - 1 ].root_path_n = path_n;
    }else if( state[ state_n - 1 ].entities_i == entities_host )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n - 1 ].host )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc s = M(l);
        if( !s )
            return ~0;
        E_text_Z_s_P_s0_copy_0( s, state[ state_n - 1 ].s );
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost[ E_conf_S_bind[ E_conf_S_bind_n - 1 ].virtualhost_n - 1 ].host = s;
    }else if( state[ state_n - 1 ].entities_i == entities_ip )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].ip )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc s = M(l);
        if( !s )
            return ~0;
        E_text_Z_s_P_s0_copy_0( s, state[ state_n - 1 ].s );
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].ip = s;
    }
    else if( state[ state_n - 1 ].entities_i == entities_port )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].port )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc ret_s;
        N port = E_text_Z_s_N_n( state[ state_n - 1 ].s, state[ state_n - 1 ].s + l - 1, &ret_s, 10 );
        if( ret_s != state[ state_n - 1 ].s + l - 1
        || !port
        )
            return ~0;
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].port = port;
    }else if( state[ state_n - 1 ].entities_i == entities_ssl )
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].ssl = yes;
    else if( state[ state_n - 1 ].entities_i == entities_ssl_value )
    {   E_conf_S_bind[ E_conf_S_bind_n - 1 ].ssl = E_conf_I_read_I_b( state[ state_n - 1 ].s );
    }else if( state[ state_n - 1 ].entities_i == entities_certificate )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].certificate_path )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc s = M(l);
        if( !s )
            return ~0;
        E_text_Z_s_P_s0_copy_0( s, state[ state_n - 1 ].s );
        if( E_conf_Z_s0_Z_path_P_normalize( &s ))
            return ~0;
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].certificate_path = s;
    }else if( state[ state_n - 1 ].entities_i == entities_private_key )
    {   if( E_conf_S_bind[ E_conf_S_bind_n - 1 ].private_key_path )
            return ~0;
        N l = E_text_Z_s0_R_0_l( state[ state_n - 1 ].s );
        Pc s = M(l);
        if( !s )
            return ~0;
        E_text_Z_s_P_s0_copy_0( s, state[ state_n - 1 ].s );
        if( E_conf_Z_s0_Z_path_P_normalize( &s ))
            return ~0;
        E_conf_S_bind[ E_conf_S_bind_n - 1 ].private_key_path = s;
    }
    return 0;
}
//------------------------------------------------------------------------------
N
E_conf_I_read( I conf_file
){  I syntax_file = E_mem_Q_file_M( "conf.syntax", yes, 0 );
    if( !~syntax_file )
        return ~0;
    struct E_text_syntax_Z_body *syntax;
    if( E_text_syntax_M( syntax_file, &syntax ))
    {   E_mem_Q_file_W( syntax_file );
        return ~0;
    }
    E_mem_Q_file_W( syntax_file );
    struct E_text_syntax_Z_state *state;
    N state_n;
    if( !~E_text_syntax_Q_state_M( syntax, &state, &state_n ))
        return ~0;
    entities_bind = E_text_syntax_R_entity_by_name( syntax, "bind name" );
    entities_ip = E_text_syntax_R_entity_by_name( syntax, "ip" );
    entities_port = E_text_syntax_R_entity_by_name( syntax, "port" );
    entities_ssl = E_text_syntax_R_entity_by_name( syntax, "ssl name" );
    entities_ssl_value = E_text_syntax_R_entity_by_name( syntax, "ssl value" );
    entities_certificate = E_text_syntax_R_entity_by_name( syntax, "certificate" );
    entities_private_key = E_text_syntax_R_entity_by_name( syntax, "private key" );
    entities_virtualhost = E_text_syntax_R_entity_by_name( syntax, "virtual host name" );
    entities_root_path = E_text_syntax_R_entity_by_name( syntax, "root path" );
    entities_host = E_text_syntax_R_entity_by_name( syntax, "host" );
    if( !~entities_bind
    || !~entities_ip
    || !~entities_port
    || !~entities_ssl
    || !~entities_certificate
    || !~entities_private_key
    || !~entities_virtualhost
    || !~entities_root_path
    || !~entities_host
    )
    {   E_text_syntax_Q_state_W( state, state_n );
        return ~0;
    }
    N ret = E_text_syntax_Q_state_I_parse( conf_file, syntax, &state, &state_n, entities_func );
    if( !~ret )
    {   E_text_syntax_Q_state_W( state, state_n );
        E_text_syntax_W(syntax);
        return ~0;
    }
    E_text_syntax_Q_state_W( state, state_n );
    E_text_syntax_W(syntax);
    if( !E_conf_S_bind_n )
        return ~0;
    for_n( i, E_conf_S_bind_n )
    {   if( !E_conf_S_bind[i].ip
        || !E_conf_S_bind[i].port
        )
            return ~0;
        if( E_conf_S_bind[i].ssl )
        {   if( !E_conf_S_bind[i].certificate_path
            || !E_conf_S_bind[i].private_key_path
            )
                return ~0;
        }
        for_n( j, E_conf_S_bind[i].virtualhost_n )
        {   if( !E_conf_S_bind[i].virtualhost[j].root_path
            || !E_conf_S_bind[i].virtualhost[j].host
            )
                return ~0;
        }
    }
    return 0;
}
/******************************************************************************/
